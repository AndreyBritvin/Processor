in
pop ax
in
pop bx
in
pop cx
call SOLVE_EQUATION:

hlt

SOLVE_EQUATION:
    push 0
    push ax
    je LINEAR_CASE:
    call SOLVE_QUADRATIC_EQUATION:
    ret

    LINEAR_CASE:
    call SOLVE_LINEAR_EQUATION:
ret

SOLVE_QUADRATIC_EQUATION:
    call CALC_DISCRIMINANT:
    push 0
    push dx
    jbe SOLVE_DISCRIMINANT:

    push nan
    out
  ret

    SOLVE_DISCRIMINANT:
    push dx
    sqrt
    push 2
    push ax
    mul
    div
    pop dx

    call CALC_FIRST_ADITION:
    push dx
    add
    out
    push 0
    push dx
    jne SOLVE_SECOND_SOL:

  ret

    SOLVE_SECOND_SOL:
    call CALC_FIRST_ADITION:
    push dx
    sub
    out

ret

CALC_DISCRIMINANT:
    push bx
    push bx
    mul
    push 4
    push ax
    push cx
    mul
    mul
    sub
    pop dx
ret

CALC_FIRST_ADITION:
    push 0
    push bx
    sub
    push 2
    push ax
    mul
    div
ret

SOLVE_LINEAR_EQUATION:
    push 0
    push bx
    je B_IS_ZERO_CASE:

    push 0
    push cx
    sub
    push bx
    div
    out
  ret

    B_IS_ZERO_CASE:
    push 0
    push cx
    je BESK_ROOTS_CASE:
    push nan
    out
  ret
    BESK_ROOTS_CASE:
    push inf
    out

ret

